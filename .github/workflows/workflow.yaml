name: Build and Deploy

on:
  workflow_dispatch:

jobs:
  tag:
    runs-on: ubuntu-latest
    environment: golang
    outputs:
      latest_tag: ${{ steps.tag_version.outputs.new_tag }}
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 5
      - name: Tag version
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          fetch_all_tags: true
          release_branches: main
          tag_prefix: v
  build:
    runs-on: ubuntu-latest
    needs:
      - tag
    steps:
      # To creata a truly static binary, we need to use musl cc
      - name: Install musl cc
        uses: awalsh128/cache-apt-pkgs-action@v1.4.3
        with:
          packages: musl-tools musl-dev musl
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "./app/go.mod"
          cache-dependency-path: "./app/go.sum"
      - name: Build
        run: |
          CC=/usr/bin/musl-gcc GOOS=linux GOARCH=amd64 go build -v -ldflags "-linkmode external -extldflags '-static' -s -w" -tags musl -o ./build/app ./app/server.go;
      # we pack the build to preserve file permissions
      - name: Pack build
        run: |
          tar -czvf build.tar.gz build
      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: build.tar.gz
          retention-days: 1
  docker-release:
    runs-on: ubuntu-latest
    needs:
      - build
      - tag
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Download build
        uses: actions/download-artifact@v4
        with:
          name: build
      - name: Unpack build
        run: |
          tar -xzvf build.tar.gz
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/app:latest
            ${{ steps.login-ecr.outputs.registry }}/app:${{ needs.tag.outputs.latest_tag }}
          file: docker/DockerfileApp
          context: .
